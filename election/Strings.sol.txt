pragma solidity ^0.4.25;

library Strings{
    function concat (string _self, string _val) internal returns (string) {
        bytes memory _baseBytes = bytes(_self);
        bytes memory _addBytes = bytes(_val);
        
        string memory _answer = new string(_baseBytes.length + _addBytes.length);
        bytes memory _answerBytes = bytes(_answer);
        
        uint j;
        uint i;
        
        for (i = 0; i < _baseBytes.length; i++){
            _answerBytes[j++] = _baseBytes[i];
        }
        for (i = 0; i < _addBytes.length; i++){
            _answerBytes[j++] = _addBytes[i];
        }
        
        return string(_answerBytes);
    }
    function valueOf(uint i) internal pure returns (string){
        if (i == 0) return "0";
        uint j = i;
        uint length;
        while (j != 0){
            length++;
            j /= 10;
        }
        bytes memory bstr = new bytes(length);
        uint k = length - 1;
        while (i != 0){
            bstr[k--] = byte(48 + i % 10);
            i /= 10;
        }
        return string(bstr);
    }
    function valueOf(address x) returns (string) {
        string memory answer = "0x";
        answer = concat(answer, baseAddress(x));
        return answer;
    }
    
    function baseAddress(address x) returns (string){
        bytes memory s = new bytes(40);
        for (uint i = 0; i < 20; i++) {
            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));
            byte hi = byte(uint8(b) / 16);
            byte lo = byte(uint8(b) - 16 * uint8(hi));
            s[2*i] = char(hi);
            s[2*i+1] = char(lo);            
        }
        return string(s);
    }

    function char(byte b) returns (byte c) {
        if (b < 10) {
            return byte(uint8(b) + 0x30);
        }
        return byte(uint8(b) + 0x57);
    }
    
}